# SKU-110K dataset for YOLO training with segmentation labels
path: ../datasets/SKU-110K  # Dataset root directory
train: train.txt  # Train images (relative to 'path')
val: val.txt  # Validation images (relative to 'path')
test: test.txt  # Test images (optional)

# Classes
names:
  0: object

# Download script/URL (optional)
download: |
  import shutil
  from pathlib import Path
  import numpy as np
  import pandas as pd
  from tqdm import tqdm
  from ultralytics.utils.downloads import download

  # Download
  dir = Path(yaml['path'])  # dataset root dir
  parent = Path(dir.parent)  # download dir
  urls = ['http://trax-geometry.s3.amazonaws.com/cvpr_challenge/SKU110K_fixed.tar.gz']
  download(urls, dir=parent)

  # Rename directories
  if dir.exists():
      shutil.rmtree(dir)
  (parent / 'SKU110K_fixed').rename(dir)  # rename dir
  (dir / 'labels').mkdir(parents=True, exist_ok=True)  # create labels dir

  # Convert labels
  names = 'image', 'x1', 'y1', 'x2', 'y2', 'class', 'image_width', 'image_height'  # column names
  for d in 'annotations_train.csv', 'annotations_val.csv', 'annotations_test.csv':
      x = pd.read_csv(dir / 'annotations' / d, names=names).values  # annotations
      images, unique_images = x[:, 0], np.unique(x[:, 0])
      with open((dir / d).with_suffix('.txt').__str__().replace('annotations_', ''), 'w') as f:
          f.writelines(f'./images/{s}\n' for s in unique_images)
      for im in tqdm(unique_images, desc=f'Converting {dir / d}'):
          cls = 0  # single-class dataset
          with open((dir / 'labels' / im).with_suffix('.txt'), 'a') as f:
              for r in x[images == im]:
                  w, h = r[6], r[7]  # image width, height
                  # Convert bounding box to polygon coordinates
                  x_min, y_min, x_max, y_max = r[1] / w, r[2] / h, r[3] / w, r[4] / h
                  x1, y1 = x_min, y_min  # Top-left
                  x2, y2 = x_max, y_min  # Top-right
                  x3, y3 = x_max, y_max  # Bottom-right
                  x4, y4 = x_min, y_max  # Bottom-left

                  # Write the segmentation label
                  f.write(f"{cls} {x1:.5f} {y1:.5f} {x2:.5f} {y2:.5f} {x3:.5f} {y3:.5f} {x4:.5f} {y4:.5f}\n")
